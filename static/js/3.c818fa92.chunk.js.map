{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","assets/images/like.svg","Components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","Components/Profile/ProfileInfo/ProfileDataForm.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","status","wrapperStatus","mainPhoto","contact","selfData","editBtn","fileInput","posts","postsBlock","item","iconUser","like","likeText","__webpack_require__","p","ProfileStatusWithHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","_useState4","setStatus","useEffect","react_default","a","createElement","className","s","onDoubleClick","value","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","style","formSummaryError","createField","Input","type","Textarea","keys","contacts","map","key","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","ProfileInfo_Contact","contactTitle","contactValue","aboutMe","Contact","_ref3","ProfileInfo","savePhoto","saveProfile","preloader","src","photos","large","userPhoto","target","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","ProfileInfo_ProfileStatusWithHooks","Post","alt","message","likesCount","MyPosts","React","memo","postsElements","MyPosts_Post_Post","id","createRef","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","component","placeholder","name","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.c818fa92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__oo9fj\",\"status\":\"ProfileInfo_status__3hJBy\",\"wrapperStatus\":\"ProfileInfo_wrapperStatus__1voON\",\"mainPhoto\":\"ProfileInfo_mainPhoto__lsUHQ\",\"contact\":\"ProfileInfo_contact__1BVUK\",\"selfData\":\"ProfileInfo_selfData__3yiz6\",\"editBtn\":\"ProfileInfo_editBtn__1lLjn\",\"fileInput\":\"ProfileInfo_fileInput__1Lll_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2Inyp\",\"postsBlock\":\"MyPosts_postsBlock__Qc36M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__38eC3\",\"iconUser\":\"Post_iconUser__3gonP\",\"like\":\"Post_like__1cxbK\",\"likeText\":\"Post_likeText__G4_Kw\"};","module.exports = __webpack_public_path__ + \"static/media/like.8d818e4e.svg\";","import React, {useState, useEffect} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            {!editMode &&\r\n            <div className={s.wrapperStatus}>\r\n\r\n                <b> </b> <span className={s.status}\r\n                               onDoubleClick={activatedEditMode}> {props.status || '---------'}  </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input value={status}\r\n                       onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deActivatedEditMode}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {createField, Input, Textarea} from \"../../../common/FormsControls/FormControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../../common/FormsControls/FormControls.module.css\";\r\n\r\n\r\n\r\nconst ProfileDataForm= ({handleSubmit,profile,error}) =>{\r\n    return <form className={s.selfData} onSubmit={handleSubmit}>\r\n        <div> <button> Save </button> </div>\r\n\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n\r\n        <div> <b> Full name </b>:\r\n            {createField('Full name','fullName',[], Input)} </div>\r\n        <div> <b> Looking for a job </b>:\r\n            {createField('','lookingForAJob',[], Input,{type:'checkbox'})} </div>\r\n\r\n\r\n            <div> <b> My professionals skills </b>:\r\n        {createField('My professionals skills','lookingForAJobDescription',[], Textarea)} </div>\r\n\r\n        <div> <b> About me </b>:\r\n            {createField('About me','aboutMe',[], Textarea)} </div>\r\n\r\n        <div> <b> Contacts </b>: {Object.keys(profile.contacts).map(key=>{\r\n            return   <div key={key} className={s.contact}>\r\n                <b>{key}:\r\n                    {createField(key,\"contacts.\" + key,[], Input)}\r\n                </b>\r\n            </div>\r\n        })} </div>\r\n        </form>\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm","import React, {useState} from 'react';\nimport s from './ProfileInfo.module.css'\nimport Preloader from \"../../../common/preloader/preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from '../../../assets/images/userPhoto.svg'\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n\n    // useEffect(()=>{\n    //     setStatus(props.status)\n    // },[props.status])\n\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    };\n    const onSubmit = (formData) => {\n        saveProfile(formData)\n            .then(() => {\n                setEditMode(false)\n            })\n    };\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img className={s.mainPhoto} src={profile.photos.large || userPhoto}/>\n                {isOwner && <input className={s.fileInput} type={'file'} onChange={onMainPhotoSelected}/>}\n\n                {editMode ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> :\n                    <ProfileData\n                        profile={profile}\n                        isOwner={isOwner}\n                        goToEditMode={() => {\n                            setEditMode(true)\n                        }}/>}\n\n                <ProfileStatusWithHooks status={status}\n                                        updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\n    return <div className={s.selfData}>\n        {isOwner && <div>\n            <button className={s.editBtn} onClick={goToEditMode}> Edit</button>\n        </div>}\n        <div><b> Full name </b>: {profile.fullName} </div>\n        <div><b> Looking for a job </b>: {profile.lookingForAJob ? 'yes' : 'no'}\n            {profile.lookingForAJob &&\n            <div><b> My professionals skills </b>: {profile.lookingForAJobDescription} </div>\n            }\n        </div>\n        <div><b> Contacts </b>: {Object.keys(profile.contacts).map(key => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n        })} </div>\n        <div><b> About me </b>: {profile.aboutMe} </div>\n    </div>\n};\n\nconst Contact = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>:{contactValue}</div>\n};\n\n\nexport default ProfileInfo;\n\n\n\n","import React from 'react';\nimport s from './Post.module.css'\nimport like from '../../../../assets/images/like.svg'\nconst Post = (props) => {\n    return (\n\n        <div className={s.item}>\n            <img className={s.iconUser} src='https://avatars.mds.yandex.net/get-pdb/812271/11fbe7bf-4689-4f95-839f-9451e3d26c0a/s375' alt =''/>\n\n          {props.message}\n\n        <div>\n                <span className={s.likeText}>\n                    <img alt ='' className={s.like} src={like}/> {props.likesCount}\n                     </span>\n            </div>\n        </div>\n    )\n}\nexport default Post;\n//т.к. Посты у нас будут меняться (это динамические штуки), то мы сначала в Posts сделали атрибут message :  <Post message='Hello, how are you?' />,\n//эти посты передаем в компоненту Post (это каждый отдельный пост) вместе с props. Т.е., взяли атрибут + пропс: message.props\n// props всегда передаются с атрибутами. Например: <Post message='Hello, how are you?' /> , а сюда передаем это сообщение \n//'Hello, how are you?' как  {props.message}\n","import React from 'react';\nimport s from './MyPosts.module.css'\nimport Post from './Post/Post.jsx'\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../../common/FormsControls/FormControls\";\n\n\nconst MyPosts = React.memo(props => {\n\n    let postsElements = props.posts.map((item) => {\n        return <Post key={item.id} message={item.message} likesCount={item.likesCount}/>\n    });\n\n    let newPostElement = React.createRef();\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText)\n    };\n\n    // let onPostChange = () => {\n    //     let text = newPostElement.current.value\n    //     props.updateNewPostText(text)\n    // }\n\n    return (\n\n        <div className={s.postsBlock}>\n            <h3 className={s.postsBlock}> My posts </h3>\n\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\n\nconst maxLength10 = maxLengthCreator(50);\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       placeholder={'Post message'}\n                       name='newPostText'\n                       validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n};\n\nconst AddNewPostFormRedux = reduxForm({form: 'AddNewPostForm'})(AddNewPostForm);\n\nexport default MyPosts;\n\n\n\n","import React from 'react';\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\n\n\n\nlet mapStateToProps= (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText:state.profilePage.newPostText\n    }\n    };\n\n    let mapDispatchToProps= (dispatch) => {\n        return {\n        //     updateNewPostText: (text) => {let action = updateNewPostTextActionCreator(text)\n        // dispatch(action)},\n        addPost: (newPostText) => {dispatch(addPostActionCreator(newPostText))}\n        }\n    };\n\nconst MyPostsContainer= connect(mapStateToProps,mapDispatchToProps) (MyPosts);\nexport default MyPostsContainer;\n\n\n\n","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\n\nconst Profile = (props) => {\n\n    return (\n        <div >\n            <ProfileInfo    savePhoto={props.savePhoto}\n                isOwner = {props.isOwner}profile={props.profile} status={props.status}\n                         updateStatus={props.updateStatus}\n                            saveProfile={props.saveProfile}/>\n            <MyPostsContainer />   {/*у нас state уже содержит {props.appState.profilePage} , т.е. state={props.appState.profilePage} */}\n        </div>\n    )\n};\nexport default Profile;\n\n\n\n","import React from 'react';\nimport Profile from \"./Profile\";\nimport {getStatus, getUsersProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profileReducer\";\nimport {connect} from \"react-redux\";\nimport { withRouter} from \"react-router-dom\";\nimport {compose} from 'redux';\n\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile () {\n        let userId = this.props.match.params.userId;\n        if(!userId) {\n            userId=this.props.authorizedUserId;\n            if(!userId) {\n                this.props.history.push('/login')\n            }\n        };\n        this.props.getUsersProfile(userId);\n        this.props.getStatus(userId)\n    }\n\n  componentDidMount() {\n   this.refreshProfile()\n\n      // usersAPI.getProfile(userId)\n      //     .then(response => {\n      //     this.props.setUserProfile(response.data);\n      // });\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n      if(this.props.match.params.userId !== prevProps.match.params.userId) {\n          this.refreshProfile()\n      }\n  }\n\n    render() {\n\n        return (\n            <Profile {...this.props}\n                isOwner = {!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n};\n\n\n\n\n// compose (\n//     withRouter,\n//     connect(mapStateToProps,{getUsersProfile}),\n//     withAuthRedirect\n// )(ProfileContainer)\n\n// let AuthRedirectComponent =  withAuthRedirect(ProfileContainer)\n\n\nlet mapStateToProps =(state) => ({\n    profile:state.profilePage.profile,\n    status:state.profilePage.status,\n    authorizedUserId:state.auth.userId,\n    isAuth:state.auth.isAuth\n});\n\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\n\nexport default compose (\n    connect(mapStateToProps,{getUsersProfile,getStatus,updateStatus, savePhoto,saveProfile}),\n    withRouter\n    // withAuthRedirect\n)(ProfileContainer)\n\n\n\n"],"sourceRoot":""}