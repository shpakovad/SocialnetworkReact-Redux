{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","assets/images/like.svg","Components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","status","wrapperStatus","posts","postsBlock","item","iconUser","like","likeText","__webpack_require__","p","ProfileStatusWithHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","_useState4","setStatus","useEffect","react_default","a","createElement","className","s","onDoubleClick","value","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","_ref","profile","src","photos","large","ProfileInfo_ProfileStatusWithHooks","preloader","Post","alt","message","likesCount","MyPosts","React","memo","postsElements","map","MyPosts_Post_Post","key","id","createRef","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","name","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","Components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,iBAAA,sCAAAC,OAAA,4BAAAC,cAAA,yDCAlBJ,EAAAC,QAAA,CAAkBI,MAAA,uBAAAC,WAAA,kDCAlBN,EAAAC,QAAA,CAAkBM,KAAA,mBAAAC,SAAA,uBAAAC,KAAA,mBAAAC,SAAA,6CCDlBV,EAAAC,QAAiBU,EAAAC,EAAuB,yKC8CzBC,EA1Ce,SAACC,GAAS,IAAAC,EAEbC,oBAAS,GAFIC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEnCK,EAFmCH,EAAA,GAE1BI,EAF0BJ,EAAA,GAAAK,EAGjBN,mBAASF,EAAMX,QAHEoB,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGnCnB,EAHmCoB,EAAA,GAG5BC,EAH4BD,EAAA,GAKxCE,oBAAU,WACND,EAAUV,EAAMX,SAClB,CAACW,EAAMX,SAeL,OACQuB,EAAAC,EAAAC,cAAA,YAEMR,GACFM,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAE1B,eACdsB,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAE3B,OAAQ4B,cAlBtB,WACrBV,GAAY,KAiBI,IAA+DP,EAAMX,QAAU,YAA/E,OAGHiB,GACDM,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOI,MAAO7B,EACV8B,SAhBA,SAACC,GACpBV,EAAUU,EAAEC,cAAcH,QAgBJI,WAAW,EACXC,OAvBI,WACvBhB,GAAY,GACZP,EAAMwB,aAAanC,SCCZoC,EAdK,SAAAC,GAAqC,IAAnCC,EAAmCD,EAAnCC,QAAStC,EAA0BqC,EAA1BrC,OAAQmC,EAAkBE,EAAlBF,aACnC,OAAKG,EAIDf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAE5B,kBACdwB,EAAAC,EAAAC,cAAA,OAAKc,IAAKD,EAAQE,OAAOC,QACzBlB,EAAAC,EAAAC,cAACiB,EAAD,CAAwB1C,OAAQA,EACRmC,aAAcA,MAPvCZ,EAAAC,EAAAC,cAACkB,EAAA,EAAD,6DCYAC,EAhBF,SAACjC,GACV,OAEIY,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEvB,MACdmB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEtB,SAAUkC,IAAI,0FAA0FM,IAAK,KAEhIlC,EAAMmC,QAETvB,EAAAC,EAAAC,cAAA,WACQF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAEpB,UACfgB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAErB,KAAMiC,IAAKjC,MADjC,IAC0CK,EAAMoC,iDCL1DC,EAAUC,IAAMC,KAAK,SAAAvC,GAEvB,IAAIwC,EAAgBxC,EAAMT,MAAMkD,IAAI,SAAChD,GACjC,OAAOmB,EAAAC,EAAAC,cAAC4B,EAAD,CAAMC,IAAKlD,EAAKmD,GAAIT,QAAS1C,EAAK0C,QAASC,WAAY3C,EAAK2C,eAGlDE,IAAMO,YAW3B,OAEIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAExB,YACdoB,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAExB,YAAjB,cAEAoB,EAAAC,EAAAC,cAACgC,EAAD,CAAqBC,SAdb,SAACC,GACbhD,EAAMiD,QAAQD,EAAOE,gBAcjBtC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEzB,OACbiD,MAMXW,EAAcC,YAAiB,IAkB/BN,EAAsBO,YAAU,CAACC,KAAM,kBAAjBD,CAhBL,SAACrD,GACpB,OACIY,EAAAC,EAAAC,cAAA,QAAMiC,SAAU/C,EAAMuD,cAClB3C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,UAAWC,IACXC,YAAa,eACbC,KAAK,cACLC,SAAU,CAACC,IAAUX,MAEhCvC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BAQDuB,oBCnCA0B,EADSC,YAfH,SAACC,GAClB,MAAO,CACH1E,MAAO0E,EAAMC,YAAY3E,MACzB2D,YAAYe,EAAMC,YAAYhB,cAIV,SAACiB,GACrB,MAAO,CAGPlB,QAAS,SAACC,GAAiBiB,EAASC,YAAqBlB,OAIzCc,CAA6C3B,GCLtDgC,EAVC,SAACrE,GAEb,OACIY,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwD,EAAD,CAAa3C,QAAS3B,EAAM2B,QAAStC,OAAQW,EAAMX,OACtCmC,aAAcxB,EAAMwB,eACjCZ,EAAAC,EAAAC,cAACyD,EAAD,MAHJ,uCCAFC,8LAEA,IAAIC,EAASC,KAAK1E,MAAM2E,MAAMC,OAAOH,OACjCA,IACAA,EAAOC,KAAK1E,MAAM6E,mBAEdH,KAAK1E,MAAM8E,QAAQC,KAAK,UAGhCL,KAAK1E,MAAMgF,gBAAgBP,GAC3BC,KAAK1E,MAAMiF,UAAUR,oCASnB,OACI7D,EAAAC,EAAAC,cAACoE,EAAD9E,OAAA+E,OAAA,GAAaT,KAAK1E,MAAlB,CACS2B,QAAS+C,KAAK1E,MAAM2B,QACpBtC,OAAQqF,KAAK1E,MAAMX,OACnBmC,aAAckD,KAAK1E,MAAMwB,uBAvBfc,IAAM8C,WAgDtBC,sBACXrB,YAViB,SAACC,GAAD,MAAY,CAC7BtC,QAAQsC,EAAMC,YAAYvC,QAC1BtC,OAAO4E,EAAMC,YAAY7E,OACzBwF,iBAAiBZ,EAAMqB,KAAKb,OAC5Bc,OAAOtB,EAAMqB,KAAKC,SAMM,CAACP,oBAAgBC,cAAUzD,mBACnDgE,IAFWH,CAIbb","file":"static/js/3.373d8c2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__oo9fj\",\"status\":\"ProfileInfo_status__3hJBy\",\"wrapperStatus\":\"ProfileInfo_wrapperStatus__1voON\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2Inyp\",\"postsBlock\":\"MyPosts_postsBlock__Qc36M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__38eC3\",\"iconUser\":\"Post_iconUser__3gonP\",\"like\":\"Post_like__1cxbK\",\"likeText\":\"Post_likeText__G4_Kw\"};","module.exports = __webpack_public_path__ + \"static/media/like.8d818e4e.svg\";","import React, {useState,useEffect}  from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\nconst ProfileStatusWithHooks =(props)=> {\r\n\r\nlet [editMode,setEditMode]=useState(false);\r\nlet [status,setStatus]=useState(props.status);\r\n\r\nuseEffect(()=>{\r\n    setStatus(props.status)\r\n},[props.status])\r\n\r\nconst activatedEditMode =()=> {\r\n    setEditMode(true)\r\n};\r\n    const deActivatedEditMode =()=> {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    };\r\n\r\n const   onStatusChange=(e) => {\r\n     setStatus(e.currentTarget.value)\r\n    };\r\n\r\n\r\n    return (\r\n            <div>\r\n\r\n                {!editMode &&\r\n                <div className={s.wrapperStatus}>\r\n                    <span className={s.status} onDoubleClick={activatedEditMode}> {props.status || '---------' }  </span>\r\n                </div>\r\n                }\r\n                {editMode &&\r\n                <div>\r\n                    <input value={status}\r\n                        onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deActivatedEditMode} />\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './ProfileInfo.module.css'\nimport Preloader from \"../../../common/preloader/preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\nconst ProfileInfo = ({profile, status, updateStatus}) => {\n    if (!profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large}/>\n                <ProfileStatusWithHooks status={status}\n                                        updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\nexport default ProfileInfo;\n\n\n\n","import React from 'react';\nimport s from './Post.module.css'\nimport like from '../../../../assets/images/like.svg'\nconst Post = (props) => {\n    return (\n\n        <div className={s.item}>\n            <img className={s.iconUser} src='https://avatars.mds.yandex.net/get-pdb/812271/11fbe7bf-4689-4f95-839f-9451e3d26c0a/s375' alt =''/>\n\n          {props.message}\n\n        <div>\n                <span className={s.likeText}>\n                    <img className={s.like} src={like}/> {props.likesCount}\n                     </span>\n            </div>\n        </div>\n    )\n}\nexport default Post;\n//т.к. Посты у нас будут меняться (это динамические штуки), то мы сначала в Posts сделали атрибут message :  <Post message='Hello, how are you?' />,\n//эти посты передаем в компоненту Post (это каждый отдельный пост) вместе с props. Т.е., взяли атрибут + пропс: message.props\n// props всегда передаются с атрибутами. Например: <Post message='Hello, how are you?' /> , а сюда передаем это сообщение \n//'Hello, how are you?' как  {props.message}\n","import React from 'react';\nimport s from './MyPosts.module.css'\nimport Post from './Post/Post.jsx'\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../../common/FormsControls/FormControls\";\n\n\nconst MyPosts = React.memo(props => {\n\n    let postsElements = props.posts.map((item) => {\n        return <Post key={item.id} message={item.message} likesCount={item.likesCount}/>\n    });\n\n    let newPostElement = React.createRef();\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText)\n    };\n\n    // let onPostChange = () => {\n    //     let text = newPostElement.current.value\n    //     props.updateNewPostText(text)\n    // }\n\n    return (\n\n        <div className={s.postsBlock}>\n            <h3 className={s.postsBlock}> My posts </h3>\n\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\n\nconst maxLength10 = maxLengthCreator(50);\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       placeholder={'Post message'}\n                       name='newPostText'\n                       validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostFormRedux = reduxForm({form: 'AddNewPostForm'})(AddNewPostForm)\n\nexport default MyPosts;\n\n\n\n","import React from 'react';\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\n\n\n\nlet mapStateToProps= (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText:state.profilePage.newPostText\n    }\n    };\n\n    let mapDispatchToProps= (dispatch) => {\n        return {\n        //     updateNewPostText: (text) => {let action = updateNewPostTextActionCreator(text)\n        // dispatch(action)},\n        addPost: (newPostText) => {dispatch(addPostActionCreator(newPostText))}\n        }\n    };\n\nconst MyPostsContainer= connect(mapStateToProps,mapDispatchToProps) (MyPosts);\nexport default MyPostsContainer;\n\n\n\n","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {updateStatus} from \"../../redux/profileReducer\";\n\n\n\nconst Profile = (props) => {\n\n    return (\n        <div >\n            <ProfileInfo profile={props.profile} status={props.status}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer />   {/*у нас state уже содержит {props.appState.profilePage} , т.е. state={props.appState.profilePage} */}\n        </div>\n    )\n}\nexport default Profile;\n\n\n\n","import React from 'react';\nimport Profile from \"./Profile\";\nimport  axios from \"axios\";\nimport {getStatus, getUsersProfile, setUserProfile, updateStatus} from \"../../redux/profileReducer\";\nimport {connect} from \"react-redux\";\nimport {Redirect, withRouter} from \"react-router-dom\";\nimport {usersAPI} from \"../../api/api\";\nimport {compose} from 'redux';\n\n\nclass ProfileContainer extends React.Component {\n  componentDidMount() {\n      let userId = this.props.match.params.userId;\n      if(!userId) {\n          userId=this.props.authorizedUserId;\n          if(!userId) {\n              this.props.history.push('/login')\n          }\n      };\n      this.props.getUsersProfile(userId);\n      this.props.getStatus(userId)\n      // usersAPI.getProfile(userId)\n      //     .then(response => {\n      //     this.props.setUserProfile(response.data);\n      // });\n  };\n\n    render() {\n\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus} />\n        )\n    }\n};\n\n\n\n// compose (\n//     withRouter,\n//     connect(mapStateToProps,{getUsersProfile}),\n//     withAuthRedirect\n// )(ProfileContainer)\n\n// let AuthRedirectComponent =  withAuthRedirect(ProfileContainer)\n\n\nlet mapStateToProps =(state) => ({\n    profile:state.profilePage.profile,\n    status:state.profilePage.status,\n    authorizedUserId:state.auth.userId,\n    isAuth:state.auth.isAuth\n});\n\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\n\nexport default compose (\n    connect(mapStateToProps,{getUsersProfile,getStatus,updateStatus}),\n    withRouter\n    // withAuthRedirect\n)(ProfileContainer)\n\n\n\n"],"sourceRoot":""}